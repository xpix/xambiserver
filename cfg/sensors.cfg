# use Config::General;
# use Data::Dumper;
# my %conf = ParseConfig(-ConfigFile => "example.cfg", -InterPolateVars => 1);
# print Dumper(\%C);'
#
# This will parse the config and print out a stringified version
# of the hash it produces, which can be used in your program.
# 

<gobal>
   timeframe_to_display 2d
</global>

# -------------- CHARTS -----------------
<display Load>
   minimumValue 0     # axis start label
   maximumValue 5    # XXX: axis end label
   divider      1     # display (value / divider)
   suffix       p     # for suffix at value (i.e. 2.95V)
   text         avg load in last minute  # Legend text 
</display>

<display Memory>
   minimumValue 0     # axis start label
   maximumValue 524   # 524Mb RPI B, 254 RPI A+, 1024 RPI B+
   divider      1000     # display (value / divider)
   suffix       free Mb     # for suffix at value (i.e. 2.95V)
   text         free memory  # Legend text 
</display>

<display Swap>
   minimumValue 0     # axis start label
   maximumValue 156   # Swap, please check /proc/meminfo
   divider      1000     # display (value / divider)
   suffix       free Mb     # for suffix at value (i.e. 2.95V)
   text         free swap  # Legend text 
</display>

<display Number_received>
   minimumValue 0     # axis start label
   maximumValue 5000  # XXX: axis end label
   divider      1     # display (value / divider)
   suffix            # for suffix at value (i.e. 2.95V)
   text         received messages  # Legend text 
</display>

<display Number_stored>
   minimumValue 0     # axis start label
   maximumValue 5000  # XXX: axis end label
   divider      1     # display (value / divider)
   suffix            # for suffix at value (i.e. 2.95V)
   text         stored messages  # Legend text 
</display>

<display Number_sent>
   minimumValue 0     # axis start label
   maximumValue 200  # XXX: axis end label
   divider      1     # display (value / divider)
   suffix            # for suffix at value (i.e. 2.95V)
   text         sent messages  # Legend text 
</display>

<display AnalogSensor>
   minimumValue -200     # axis start label
   maximumValue 200  # axis end label
   divider      1     # display (value / divider)
   suffix            # for suffix at value (i.e. 2.95V)
   text         Analog value  # Legend text 
</display>

<display Power>
   minimumValue 1.500 # axis start label
   maximumValue 3.500 # axis end label
   divider      1000  # display (value / divider)
   suffix       V     # for suffix at value (i.e. 2.95V)
   text         Battery in Volt # Legend text 
</display>

<display Temperature>
   minimumValue -20
   maximumValue 50
   divider      100
   suffix       &deg;C
   format       %.2f  # display as float with 2 digits
   text         Temperature in Celsius
   valueidx     1     # which index has main value? i.e. 2300 69 (volt on 0, Temperature on 1)
   # Gauge display colors
   minType      gauge # Which type of display in minimized display
   greenFrom    0    # Gauge display color (only green, yellow and red allowed)
   greenTo      15
   yellowFrom   15
   yellowTo     35
   redFrom      35
   redTo        50
</display>

<display Humidity>
   minimumValue 0
   maximumValue 100
   divider      1
   suffix       %
   format       %d    # display as decimal
   text         Humidity in percent
   valueidx     2     # which index has main value? i.e. 2300 69 (volt on 0, Humidity on 1)
   # Gauge display colors
   minType      gauge
   yellowFrom   0
   yellowTo     40
   greenFrom    40    # Gauge display color (only green, yellow and red allowed)
   greenTo      65
   redFrom      65
   redTo        100
</display>

<display Plant>
   minimumValue 0
   maximumValue 100
   divider      8  # 100% = 300 (max Value) 
   suffix       %
   format       %d    # display as decimal
   text         Plant-humidity in percent
   valueidx     1     # which index has main value? i.e. 2300 69 (volt on 0, Humidity on 1)
   # Gauge display colors
   minType      gauge
   yellowFrom   0
   yellowTo     22
   greenFrom    22    # Gauge display color (only green, yellow and red allowed)
   greenTo      88
   redFrom      88
   redTo        100
</display>

<display Letterbox>
   minimumValue 0     # axis start label
   maximumValue 1.2     # axis end label
   divider      1     # 100% = 300 (max Value) 
   suffix       s     # for suffix at value (i.e. 2.95V)
   text         Status (1=full,0=empty) # Legend text 
   minType      switch # type of display in minimized display
   ImageOn      mailbox_full.png
   ImageOff     mailbox_empty.png
</display>

<display MQTT>
   minimumValue 0     # axis start label
   maximumValue 5000     # XXX: axis end label
   valueidx     1     # which index has main value? i.e. 2300 69 (volt on 0, Humidity on 1)
   divider      1     # 100% = 300 (max Value) 
   suffix            # for suffix at value (i.e. 2.95V)
   text         messages # Legend text 
   minType      gauge
</display>

<display RPI>
   minimumValue 0     # axis start label
   maximumValue 100     # XXX: axis end label
   yellowFrom   0
   yellowTo     22
   greenFrom    22    # Gauge display color (only green, yellow and red allowed)
   greenTo      50
   redFrom      50
   redTo        100
   valueidx     0     # which index has main value? i.e. 2300 69 (volt on 0, Humidity on 1)
   divider      100   # 
   suffix       °C    # for suffix at value (i.e. 2.95V)
   text         messages # Legend text 
   minType      gauge
</display>

# -------------- CHARTS -----------------

# -------------- SENSORS -----------------
<sensor Temperature> # Air temperature sensors
   startNodeId 110   # start segemnt sensor type
   endNodeId   149   # end segemnt sensor type
   ValNames    Power # first Power then Value0 then Value1 and so on
   ValNames    Temperature
   Image       themometer.png # Icon for small tiles
</sensor>

<sensor Humidity> # Air Humidity sensors
   startNodeId 150   # start segemnt sensor type
   endNodeId   199   # start segemnt sensor type
   ValNames    Power
   ValNames    Temperature
   ValNames    Humidity
   Image       humidity.png
</sensor>

<sensor Plant> # Plant Humidity sensors
   startNodeId 300   # start segemnt sensor type
   endNodeId   349   # start segemnt sensor type
   ValNames    Power
   ValNames    Plant
   Image       plant14.png
</sensor>

<sensor Letterbox> # Letterbox node
   startNodeId 400   # start segemnt sensor type
   endNodeId   419   # start segemnt sensor type
   ValNames    Power
   ValNames    Letterbox
   ValNames    AnalogSensor
   Image       letterbox.png
</sensor>

<sensor MQTT> # Status MQTT service
   startNodeId 900   # start segemnt sensor type
   endNodeId   900   # end segemnt sensor type
   ValNames    Number_received
   ValNames    Number_stored
   ValNames    Number_sent
   Image       services.png
</sensor>

<sensor RPI> # Status Raspberry PI
   startNodeId 901   # start segemnt sensor type
   endNodeId   901   # end segemnt sensor type
   ValNames    Temperature
   ValNames    Load
   ValNames    Memory
   ValNames    Swap
   Image       raspberry.png
</sensor>
# -------------- SENSORS -----------------

